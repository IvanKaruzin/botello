import asyncio
import nest_asyncio
from telegram import Update
from telegram import Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ContextTypes
import discord
from discord.ext import commands
from dotenv import load_dotenv
import os
import random
import re


nest_asyncio.apply()

# === –¢–æ–∫–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
DISCORD_CHANNEL_ID = int(os.getenv("DISCORD_CHANNEL_ID"))
TELEGRAM_CHAT_ID = int(os.getenv("TELEGRAM_CHAT_ID"))
TELEGRAM_TOPIC_ID = int(os.getenv("TELEGRAM_TOPIC_ID"))

# === Telegram ===
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()
telegram_bot = Bot(token=TELEGRAM_TOKEN)


# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
async def get_voice_members():
    report = ""
    for guild in discord_bot.guilds:
        for channel in guild.voice_channels:
            if len(channel.members) > 0:
                report += f"üéß *{channel.name}* ({guild.name}):\n"
                for member in channel.members:
                    report += f"  - {member.display_name}\n"
    return report or "–ù–∏–∫–æ–≥–æ –Ω–µ—Ç –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö."


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram-–∫–æ–º–∞–Ω–¥—ã /–≥–æ–ª–æ—Å
async def voice_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    report = await get_voice_members()
    await update.message.reply_text(report, parse_mode="Markdown")


# Telegram: –∫–æ–º–∞–Ω–¥–∞ /start
async def tg_start(update: Update, context: CallbackContext):
    #await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç –∏–∑ Telegram!")
    chat = update.effective_chat
    await update.message.reply_text(f"Chat ID: {chat.id}")


telegram_app.add_handler(CommandHandler("start", tg_start))
telegram_app.add_handler(CommandHandler("voice", voice_command))

# === Discord ===
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.voice_states = True

discord_bot = commands.Bot(command_prefix="!", intents=intents)


@discord_bot.event
async def on_message(message):
    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.author == discord_bot.user:
        return

    await discord_bot.process_commands(message)

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ç–µ–∫—Å—Ç
    author_name = message.author.display_name
    content_text = f"*{author_name}* –≤ Discord:\n{message.content or 'üì∑'}"

    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è (attachments)
    if message.attachments:
        for attachment in message.attachments:
            # –ü—Ä–æ–≤–µ—Ä–∏–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            if attachment.content_type and attachment.content_type.startswith(
                    "image/"):
                # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
                await telegram_bot.send_photo(
                    chat_id=TELEGRAM_CHAT_ID,
                    photo=attachment.url,
                    caption=content_text,
                    parse_mode="Markdown",
                    message_thread_id=TELEGRAM_TOPIC_ID)
                return  # –û—Ç–ø—Ä–∞–≤–∏–ª–∏ ‚Äî –≤—ã—Ö–æ–¥–∏–º
            else:
                # –î—Ä—É–≥–æ–π —Ç–∏–ø —Ñ–∞–π–ª–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞–∫ —Å—Å—ã–ª–∫—É
                await telegram_bot.send_message(
                    chat_id=TELEGRAM_CHAT_ID,
                    text=f"{content_text}\n\nüìé –í–ª–æ–∂–µ–Ω–∏–µ: {attachment.url}",
                    parse_mode="Markdown",
                    message_thread_id=TELEGRAM_TOPIC_ID)
                return

    # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.content:
        await telegram_bot.send_message(chat_id=TELEGRAM_CHAT_ID,
                                        text=content_text,
                                        parse_mode="Markdown",
                                        message_thread_id=TELEGRAM_TOPIC_ID)


@discord_bot.event
async def on_ready():
    print(f"[Discord] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {discord_bot.user}")
    for guild in discord_bot.guilds:
        print(f"üõ°Ô∏è –°–µ—Ä–≤–µ—Ä: {guild.name}")
        for channel in guild.text_channels:
            print(f"  üì∫ –ö–∞–Ω–∞–ª: {channel.name} (ID: {channel.id})")


@discord_bot.event
async def on_connect():
    try:
        synced = await discord_bot.tree.sync()
        print(f"Slash-–∫–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {len(synced)} —à—Ç.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ sync: {e}")


@discord_bot.tree.command(name="dice",
                          description="–ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —á–∏—Å–ª–æ–º –≥—Ä–∞–Ω–µ–π")
async def dice(interaction: discord.Interaction, sides: str = "6"):
    # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ –≥—Ä–∞–Ω–µ–π
    match = re.search(r'(\d+)', sides)
    arg = int(match.group(1)) if match else 6

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–Ω–µ–π
    if arg < 2:
        await interaction.response.send_message(
            "–ò–î–ò–û–¢! üé≤ –ö—É–±–∏–∫ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–∏–Ω–∏–º—É–º 2 –≥—Ä–∞–Ω–∏!", ephemeral=False)
        return

    # –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
    number = random.randint(1, arg)
    await interaction.response.send_message(f"üé≤ –í—ã–ø–∞–ª–æ: {number} (–∏–∑ {arg})",
                                            ephemeral=False)


@discord_bot.command(name="dice")
async def dice_text(ctx, arg: str = "6"):
    import re

    # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ: –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –ª–∏–±–æ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ dice100
    match = re.search(r'(\d+)', arg)
    sides = int(match.group(1)) if match else 6

    if sides < 2:
        await ctx.send("–ò–î–ò–û–¢! üé≤ –ö—É–±–∏–∫ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–∏–Ω–∏–º—É–º 2 –≥—Ä–∞–Ω–∏!")
        return

    number = random.randint(1, sides)
    await ctx.send(f"üé≤ –í—ã–ø–∞–ª–æ: {number} (–∏–∑ {sides})")


@discord_bot.command(name="choose")
async def dice_text(ctx, *args):
    number = random.randint(0, len(args) - 1)
    await ctx.send(f"–ü–æ–±–µ–∂–¥–∞–µ—Ç {args[number]}!")


@discord_bot.tree.command(name="choose")
async def dice_text(interaction: discord.Interaction, choices: str):
    number = random.randint(0, len(choices.split()) - 1)
    await interaction.response.send_message(
        f"–ü–æ–±–µ–∂–¥–∞–µ—Ç {choices.split()[number]}! ({choices})")


@discord_bot.command(name="purge")
async def purge(ctx, n: int = 5):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö n —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ
    deleted = await ctx.channel.purge(
        limit=n, check=lambda message: message.author == discord_bot.user)

    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
    await ctx.send(f"–£–¥–∞–ª–µ–Ω–æ {len(deleted)} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞.",
                   delete_after=5)


# === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
async def main():
    print("–ó–∞–ø—É—Å–∫ Telegram –∏ Discord –±–æ—Ç–æ–≤...")

    await telegram_app.initialize()
    await telegram_app.start()
    await telegram_app.updater.start_polling()
    await discord_bot.start(DISCORD_TOKEN)


# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(main())
